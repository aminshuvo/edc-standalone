# Default values for edc-standalone
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  nameOverride: ""
  fullnameOverride: ""

# EDC Image configuration
edc:
  image:
    repository: tractusx/edc-runtime-memory
    tag: "0.7.0"
    pullPolicy: IfNotPresent
  
  # Resource configuration
  resources:
    controlPlane:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "250m"
    dataPlane:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "100m"
  
  # Health check configuration
  healthChecks:
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
  
  # Port configuration
  ports:
    http: 8181
    data: 8181
    management: 8181

# EDC Standalone configuration
standalone:
  enabled: true
  name: "edc-standalone"
  
  # Configuration properties
  config:
    connector:
      name: "edc-standalone-connector"
      id: "edc-standalone"
    
    # Web Server Configuration
    web:
      http:
        port: 8181
        data:
          port: 8181
        management:
          port: 8181
          path: "/api"
    
    # Control Plane Configuration
    controlplane:
      endpoint:
        url: "http://edc-control-plane:8181"
        port: 8181
    
    # Data Plane Configuration
    dataplane:
      endpoint:
        url: "http://edc-data-plane:8181"
        port: 8181
    
    # Storage Configuration
    storage:
      type: "in-memory"
    
    # Authentication Configuration
    auth:
      type: "none"
    
    # Policy Configuration
    policy:
      engine:
        type: "in-memory"
    
    # Transfer Configuration
    transfer:
      type: "http"
      endpoint:
        url: "http://edc-transfer:8082"
      proxy:
        token:
          signer:
            privatekey:
              alias: "test-signer"
          verifier:
            publickey:
              alias: "test-verifier"
    
    # Catalog Configuration
    catalog:
      endpoint:
        url: "http://edc-catalog:8083"
    
    # IAM Configuration
    iam:
      issuer:
        id: "test-issuer"
      sts:
        oauth:
          token:
            url: "http://dummy-sts-url"
          client:
            id: "dummy-client-id"
            secret:
              alias: "dummy-client-secret-alias"
    
    # Additional Configuration
    tx:
      iam:
        iatp:
          bdrs:
            server:
              url: "http://dummy-bdrs-server-url"
  
  # Secrets configuration
  secrets:
    apiKey: "edc-api-key"
    jwtSecret: "edc-jwt-secret"

# EDC Peer configuration
peer:
  enabled: true
  name: "edc-peer"
  
  # Configuration properties
  config:
    connector:
      name: "edc-peer-connector"
      id: "edc-peer"
    
    # Control Plane Configuration
    controlplane:
      endpoint:
        url: "http://edc-peer-control-plane:8181"
        port: 8181
    
    # Data Plane Configuration
    dataplane:
      endpoint:
        url: "http://edc-peer-data-plane:8181"
        port: 8181
    
    # Storage Configuration
    storage:
      type: "in-memory"
    
    # Authentication Configuration
    auth:
      type: "none"
    
    # Policy Configuration
    policy:
      engine:
        type: "in-memory"
    
    # Transfer Configuration
    transfer:
      type: "http"
      endpoint:
        url: "http://edc-peer-transfer:8082"
      proxy:
        token:
          signer:
            privatekey:
              alias: "test-signer"
          verifier:
            publickey:
              alias: "test-verifier"
    
    # Catalog Configuration
    catalog:
      endpoint:
        url: "http://edc-peer-catalog:8083"
    
    # Peer Integration Configuration
    peer:
      standalone:
        url: "http://edc-control-plane.edc-standalone.svc.cluster.local:8181"
        id: "edc-standalone"
    
    # IAM Configuration
    iam:
      issuer:
        id: "test-issuer"
      sts:
        oauth:
          token:
            url: "http://dummy-sts-url"
          client:
            id: "dummy-client-id"
            secret:
              alias: "dummy-client-secret-alias"
  
  # Secrets configuration
  secrets:
    apiKey: "edc-peer-api-key"
    jwtSecret: "edc-peer-jwt-secret"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  
  hosts:
    - host: edc-control.local
      paths:
        - path: /
          pathType: Prefix
          service:
            name: edc-control-plane
            port: 8181
    - host: edc-data.local
      paths:
        - path: /
          pathType: Prefix
          service:
            name: edc-data-plane
            port: 8181

# RBAC configuration
rbac:
  enabled: true
  create: true

# Service accounts
serviceAccounts:
  create: true
  annotations: {}
  
  # EDC Standalone service accounts
  standalone:
    controlPlane:
      create: true
      name: "edc-control-plane-sa"
    dataPlane:
      create: true
      name: "edc-data-plane-sa"
  
  # EDC Peer service accounts
  peer:
    controlPlane:
      create: true
      name: "edc-peer-control-plane-sa"
    dataPlane:
      create: true
      name: "edc-peer-data-plane-sa" 